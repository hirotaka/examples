-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.talk_to_kanye(
	name text)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
declare
  kayne_quote text;
begin
  select content::json->>'quote'
  into kayne_quote
  from http_get('https://api.kanye.rest/');

  return concat('Hey ', name, '. ', kayne_quote);
end;
$BODY$;

ALTER FUNCTION public.talk_to_kanye(text)
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.talk_to_kanye(text) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.talk_to_kanye(text) TO anon;

GRANT EXECUTE ON FUNCTION public.talk_to_kanye(text) TO authenticated;

GRANT EXECUTE ON FUNCTION public.talk_to_kanye(text) TO postgres;

GRANT EXECUTE ON FUNCTION public.talk_to_kanye(text) TO service_role;

GRANT EXECUTE ON FUNCTION public.talk_to_kanye(text) TO supabase_admin;

CREATE OR REPLACE FUNCTION public.increment_clicks(
	)
    RETURNS bigint
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
declare
  new_clicks int8;
begin
  -- 現在のクリック数をselect
  select clicks
  into new_clicks
  from public.profiles
  where id = auth.uid();
  -- クリック数をインクリメント
  new_clicks = new_clicks + 1;
  -- クリック数を更新
  update public.profiles
  set clicks = new_clicks
  where id = auth.uid();
  -- インクリメントした数を返す
  return new_clicks;
end;
$BODY$;

ALTER FUNCTION public.increment_clicks()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.increment_clicks() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.increment_clicks() TO anon;

GRANT EXECUTE ON FUNCTION public.increment_clicks() TO authenticated;

GRANT EXECUTE ON FUNCTION public.increment_clicks() TO postgres;

GRANT EXECUTE ON FUNCTION public.increment_clicks() TO service_role;

GRANT EXECUTE ON FUNCTION public.increment_clicks() TO supabase_admin;

CREATE OR REPLACE FUNCTION public.hello_world(
	)
    RETURNS text
    LANGUAGE 'sql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
  select concat('Hello, ', auth.email(), '!');
$BODY$;

ALTER FUNCTION public.hello_world()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.hello_world() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.hello_world() TO anon;

GRANT EXECUTE ON FUNCTION public.hello_world() TO authenticated;

GRANT EXECUTE ON FUNCTION public.hello_world() TO postgres;

GRANT EXECUTE ON FUNCTION public.hello_world() TO service_role;

GRANT EXECUTE ON FUNCTION public.hello_world() TO supabase_admin;

CREATE TABLE IF NOT EXISTS public.profiles
(
    id uuid NOT NULL,
    updated_at timestamp with time zone,
    name text COLLATE pg_catalog."default",
    clicks bigint DEFAULT 0,
    stripe_customer text COLLATE pg_catalog."default",
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.profiles
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.profiles
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.profiles TO anon;

GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO postgres;

GRANT ALL ON TABLE public.profiles TO service_role;

GRANT ALL ON TABLE public.profiles TO supabase_admin;
CREATE POLICY "パブリックなプロフィールはだれでも参照（sel"
    ON public.profiles
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "自身のプロフィールを更新（update）できる。"
    ON public.profiles
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = id));
CREATE POLICY "自身のプロフィールを追加（insert）できる。"
    ON public.profiles
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.uid() = id));
